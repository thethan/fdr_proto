// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: draft_results.proto

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".

package fdr_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DraftPlayerRequest struct {
	PlayerId int32 `protobuf:"varint,1,opt,name=player_id,proto3" json:"player_id,omitempty"`
	DraftId  int32 `protobuf:"varint,2,opt,name=draft_id,proto3" json:"draft_id,omitempty"`
	UserId   int32 `protobuf:"varint,3,opt,name=user_id,proto3" json:"user_id,omitempty"`
}

func (m *DraftPlayerRequest) Reset()         { *m = DraftPlayerRequest{} }
func (m *DraftPlayerRequest) String() string { return proto.CompactTextString(m) }
func (*DraftPlayerRequest) ProtoMessage()    {}
func (*DraftPlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_446ed4cf1b75512d, []int{0}
}
func (m *DraftPlayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DraftPlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DraftPlayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DraftPlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DraftPlayerRequest.Merge(m, src)
}
func (m *DraftPlayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *DraftPlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DraftPlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DraftPlayerRequest proto.InternalMessageInfo

func (m *DraftPlayerRequest) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *DraftPlayerRequest) GetDraftId() int32 {
	if m != nil {
		return m.DraftId
	}
	return 0
}

func (m *DraftPlayerRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type DraftPlayerResponse struct {
	Player *Player `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
}

func (m *DraftPlayerResponse) Reset()         { *m = DraftPlayerResponse{} }
func (m *DraftPlayerResponse) String() string { return proto.CompactTextString(m) }
func (*DraftPlayerResponse) ProtoMessage()    {}
func (*DraftPlayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_446ed4cf1b75512d, []int{1}
}
func (m *DraftPlayerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DraftPlayerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DraftPlayerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DraftPlayerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DraftPlayerResponse.Merge(m, src)
}
func (m *DraftPlayerResponse) XXX_Size() int {
	return m.Size()
}
func (m *DraftPlayerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DraftPlayerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DraftPlayerResponse proto.InternalMessageInfo

func (m *DraftPlayerResponse) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func init() {
	proto.RegisterType((*DraftPlayerRequest)(nil), "fdr.DraftPlayerRequest")
	proto.RegisterType((*DraftPlayerResponse)(nil), "fdr.DraftPlayerResponse")
}

func init() { proto.RegisterFile("draft_results.proto", fileDescriptor_446ed4cf1b75512d) }

var fileDescriptor_446ed4cf1b75512d = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x50, 0xb1, 0x4a, 0x03, 0x41,
	0x10, 0xbd, 0x4b, 0x30, 0xea, 0x9e, 0x4d, 0x36, 0x85, 0xe1, 0x08, 0x8b, 0xc4, 0x46, 0x04, 0x6f,
	0x21, 0x82, 0x45, 0x4a, 0xd1, 0x5e, 0x62, 0x67, 0x13, 0x36, 0xee, 0x5c, 0xee, 0x20, 0xb9, 0x3d,
	0x67, 0xe7, 0x84, 0xb4, 0x7e, 0x81, 0xe0, 0x4f, 0x59, 0x06, 0x6c, 0x2c, 0x25, 0xf1, 0x43, 0xc4,
	0xdd, 0x43, 0x13, 0x52, 0x0d, 0x6f, 0xde, 0xbc, 0x79, 0x8f, 0xc7, 0x3a, 0x1a, 0x55, 0x4a, 0x63,
	0x04, 0x5b, 0xcd, 0xc8, 0x26, 0x25, 0x1a, 0x32, 0xbc, 0x99, 0x6a, 0x8c, 0x6f, 0xa7, 0x39, 0x65,
	0xd5, 0x24, 0x79, 0x34, 0x73, 0x39, 0x07, 0x52, 0xcf, 0x80, 0x16, 0x24, 0x61, 0x65, 0xad, 0xd4,
	0x90, 0x12, 0x02, 0xc8, 0xa9, 0x31, 0xd3, 0x19, 0x50, 0x96, 0xa3, 0x2e, 0x15, 0xd2, 0x42, 0xaa,
	0xa2, 0x30, 0xa4, 0x28, 0x37, 0x45, 0xfd, 0x2b, 0x3e, 0x2a, 0x67, 0x6a, 0x01, 0xe8, 0x51, 0x5f,
	0x31, 0x7e, 0xf3, 0x6b, 0x78, 0xe7, 0x96, 0x23, 0x78, 0xaa, 0xc0, 0x12, 0xef, 0xb1, 0x43, 0x7f,
	0x35, 0xce, 0x75, 0x37, 0x3c, 0x09, 0xcf, 0xf6, 0x46, 0xff, 0x0b, 0x1e, 0xb3, 0x03, 0x1f, 0x32,
	0xd7, 0xdd, 0x86, 0x23, 0xff, 0x30, 0x6f, 0xb3, 0xfd, 0xca, 0x7a, 0x5d, 0xd3, 0x51, 0x41, 0x7f,
	0xc8, 0x3a, 0x5b, 0x16, 0xb6, 0x34, 0x85, 0x05, 0x7e, 0xca, 0x5a, 0xfe, 0xa5, 0x33, 0x88, 0x06,
	0x51, 0x92, 0x6a, 0x4c, 0xea, 0xa3, 0x9a, 0x1a, 0x4c, 0x58, 0xb4, 0xa1, 0xe5, 0xf7, 0xdb, 0xf0,
	0xd8, 0x49, 0x76, 0xf3, 0xc7, 0xdd, 0x5d, 0xc2, 0xbb, 0xf6, 0xdb, 0x2f, 0x1f, 0xdf, 0x6f, 0x8d,
	0x88, 0xb7, 0xa4, 0x8b, 0x3c, 0x0c, 0xcf, 0xaf, 0xaf, 0xde, 0x57, 0x22, 0x5c, 0xae, 0x44, 0xf8,
	0xb5, 0x12, 0xe1, 0xeb, 0x5a, 0x04, 0xcb, 0xb5, 0x08, 0x3e, 0xd7, 0x22, 0x78, 0xe8, 0x6d, 0x34,
	0x4e, 0x19, 0x50, 0xa6, 0x0a, 0x99, 0x6a, 0xbc, 0x70, 0xd5, 0x4d, 0x5a, 0x6e, 0x5c, 0xfe, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x2d, 0xf6, 0xd0, 0x01, 0xb2, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DraftPlayerClient is the client API for DraftPlayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DraftPlayerClient interface {
	DraftPlayer(ctx context.Context, in *DraftPlayerRequest, opts ...grpc.CallOption) (*DraftPlayerResponse, error)
}

type draftPlayerClient struct {
	cc *grpc.ClientConn
}

func NewDraftPlayerClient(cc *grpc.ClientConn) DraftPlayerClient {
	return &draftPlayerClient{cc}
}

func (c *draftPlayerClient) DraftPlayer(ctx context.Context, in *DraftPlayerRequest, opts ...grpc.CallOption) (*DraftPlayerResponse, error) {
	out := new(DraftPlayerResponse)
	err := c.cc.Invoke(ctx, "/fdr.DraftPlayer/DraftPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DraftPlayerServer is the server API for DraftPlayer service.
type DraftPlayerServer interface {
	DraftPlayer(context.Context, *DraftPlayerRequest) (*DraftPlayerResponse, error)
}

// UnimplementedDraftPlayerServer can be embedded to have forward compatible implementations.
type UnimplementedDraftPlayerServer struct {
}

func (*UnimplementedDraftPlayerServer) DraftPlayer(ctx context.Context, req *DraftPlayerRequest) (*DraftPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DraftPlayer not implemented")
}

func RegisterDraftPlayerServer(s *grpc.Server, srv DraftPlayerServer) {
	s.RegisterService(&_DraftPlayer_serviceDesc, srv)
}

func _DraftPlayer_DraftPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DraftPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftPlayerServer).DraftPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fdr.DraftPlayer/DraftPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftPlayerServer).DraftPlayer(ctx, req.(*DraftPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DraftPlayer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fdr.DraftPlayer",
	HandlerType: (*DraftPlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DraftPlayer",
			Handler:    _DraftPlayer_DraftPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "draft_results.proto",
}

func (m *DraftPlayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DraftPlayerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDraftResults(dAtA, i, uint64(m.PlayerId))
	}
	if m.DraftId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDraftResults(dAtA, i, uint64(m.DraftId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDraftResults(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *DraftPlayerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DraftPlayerResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Player != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDraftResults(dAtA, i, uint64(m.Player.Size()))
		n1, err1 := m.Player.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func encodeVarintDraftResults(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DraftPlayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovDraftResults(uint64(m.PlayerId))
	}
	if m.DraftId != 0 {
		n += 1 + sovDraftResults(uint64(m.DraftId))
	}
	if m.UserId != 0 {
		n += 1 + sovDraftResults(uint64(m.UserId))
	}
	return n
}

func (m *DraftPlayerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovDraftResults(uint64(l))
	}
	return n
}

func sovDraftResults(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDraftResults(x uint64) (n int) {
	return sovDraftResults(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DraftPlayerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDraftResults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DraftPlayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DraftPlayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDraftResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DraftId", wireType)
			}
			m.DraftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDraftResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DraftId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDraftResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDraftResults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDraftResults
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDraftResults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DraftPlayerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDraftResults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DraftPlayerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DraftPlayerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDraftResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDraftResults
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDraftResults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDraftResults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDraftResults
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDraftResults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDraftResults(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDraftResults
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDraftResults
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDraftResults
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDraftResults
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDraftResults
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDraftResults
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDraftResults(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDraftResults
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDraftResults = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDraftResults   = fmt.Errorf("proto: integer overflow")
)
