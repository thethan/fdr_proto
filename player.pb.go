// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: player.proto

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".

package fdr_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PlayerPosition int32

const (
	PlayerPosition_NA  PlayerPosition = 0
	PlayerPosition_QB  PlayerPosition = 1
	PlayerPosition_RB  PlayerPosition = 2
	PlayerPosition_WR  PlayerPosition = 3
	PlayerPosition_TE  PlayerPosition = 4
	PlayerPosition_K   PlayerPosition = 5
	PlayerPosition_DEF PlayerPosition = 6
)

var PlayerPosition_name = map[int32]string{
	0: "NA",
	1: "QB",
	2: "RB",
	3: "WR",
	4: "TE",
	5: "K",
	6: "DEF",
}

var PlayerPosition_value = map[string]int32{
	"NA":  0,
	"QB":  1,
	"RB":  2,
	"WR":  3,
	"TE":  4,
	"K":   5,
	"DEF": 6,
}

func (x PlayerPosition) String() string {
	return proto.EnumName(PlayerPosition_name, int32(x))
}

func (PlayerPosition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{0}
}

type CreatePlayerRequest struct {
}

func (m *CreatePlayerRequest) Reset()         { *m = CreatePlayerRequest{} }
func (m *CreatePlayerRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePlayerRequest) ProtoMessage()    {}
func (*CreatePlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{0}
}
func (m *CreatePlayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePlayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePlayerRequest.Merge(m, src)
}
func (m *CreatePlayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePlayerRequest proto.InternalMessageInfo

type CreatePlayerResponse struct {
}

func (m *CreatePlayerResponse) Reset()         { *m = CreatePlayerResponse{} }
func (m *CreatePlayerResponse) String() string { return proto.CompactTextString(m) }
func (*CreatePlayerResponse) ProtoMessage()    {}
func (*CreatePlayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{1}
}
func (m *CreatePlayerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePlayerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePlayerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePlayerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePlayerResponse.Merge(m, src)
}
func (m *CreatePlayerResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreatePlayerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePlayerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePlayerResponse proto.InternalMessageInfo

type Player struct {
	Id        int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image     string           `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Positions []PlayerPosition `protobuf:"varint,4,rep,packed,name=positions,proto3,enum=fdr.PlayerPosition" json:"positions,omitempty"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{2}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return m.Size()
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Player) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Player) GetPositions() []PlayerPosition {
	if m != nil {
		return m.Positions
	}
	return nil
}

func init() {
	proto.RegisterEnum("fdr.PlayerPosition", PlayerPosition_name, PlayerPosition_value)
	proto.RegisterType((*CreatePlayerRequest)(nil), "fdr.CreatePlayerRequest")
	proto.RegisterType((*CreatePlayerResponse)(nil), "fdr.CreatePlayerResponse")
	proto.RegisterType((*Player)(nil), "fdr.Player")
}

func init() { proto.RegisterFile("player.proto", fileDescriptor_41d803d1b635d5c6) }

var fileDescriptor_41d803d1b635d5c6 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4f, 0x6b, 0xe2, 0x40,
	0x18, 0xc6, 0x33, 0x89, 0x89, 0x38, 0x88, 0x84, 0xd1, 0x5d, 0xb2, 0xb2, 0x04, 0xc9, 0x49, 0x84,
	0x4d, 0x58, 0x17, 0xf6, 0xd0, 0x5b, 0x6d, 0x2d, 0x85, 0x42, 0xb1, 0xa1, 0x20, 0xf4, 0x36, 0x36,
	0x6f, 0xfe, 0x80, 0xc9, 0xa4, 0x33, 0x93, 0x82, 0xd7, 0x7e, 0x82, 0x42, 0xbf, 0x54, 0x8f, 0x42,
	0x2f, 0x3d, 0x16, 0xed, 0x07, 0x29, 0x49, 0x84, 0x2a, 0x78, 0xfa, 0x25, 0xcf, 0x33, 0x3c, 0xf3,
	0xce, 0xfb, 0xe0, 0x76, 0xbe, 0xa4, 0x2b, 0xe0, 0x6e, 0xce, 0x99, 0x64, 0x44, 0x0b, 0x03, 0xde,
	0x9f, 0x46, 0x89, 0x8c, 0x8b, 0x85, 0x7b, 0xcf, 0x52, 0x2f, 0x05, 0x49, 0x1f, 0x81, 0x0b, 0xf0,
	0x24, 0x2f, 0x84, 0xf0, 0x02, 0x08, 0x25, 0x07, 0xf0, 0x22, 0xc6, 0xa2, 0x25, 0xc8, 0x38, 0xe1,
	0x41, 0x4e, 0xb9, 0x5c, 0x79, 0x34, 0xcb, 0x98, 0xa4, 0x32, 0x61, 0x99, 0xa8, 0xb3, 0x9c, 0x1f,
	0xb8, 0x7b, 0xc6, 0x81, 0x4a, 0x98, 0x55, 0x37, 0xf8, 0xf0, 0x50, 0x80, 0x90, 0xce, 0x4f, 0xdc,
	0x3b, 0x94, 0x45, 0xce, 0x32, 0x01, 0x4e, 0x81, 0x8d, 0x5a, 0x21, 0x1d, 0xac, 0x26, 0x81, 0x85,
	0x06, 0x68, 0xa8, 0xfb, 0x6a, 0x12, 0x10, 0x82, 0x1b, 0x19, 0x4d, 0xc1, 0x52, 0x07, 0x68, 0xd8,
	0xf2, 0xab, 0x6f, 0xd2, 0xc3, 0x7a, 0x92, 0xd2, 0x08, 0x2c, 0xad, 0x12, 0xeb, 0x1f, 0xf2, 0x17,
	0xb7, 0x72, 0x26, 0x92, 0x6a, 0x0a, 0xab, 0x31, 0xd0, 0x86, 0x9d, 0x71, 0xd7, 0x0d, 0x03, 0xee,
	0xd6, 0xc9, 0xb3, 0x9d, 0xe7, 0x7f, 0x9f, 0x1a, 0x5d, 0xe2, 0xce, 0xa1, 0x49, 0x0c, 0xac, 0x5e,
	0x9f, 0x9a, 0x4a, 0xc9, 0x9b, 0x89, 0x89, 0x4a, 0xfa, 0x13, 0x53, 0x2d, 0x39, 0xf7, 0x4d, 0xad,
	0xe4, 0xed, 0xd4, 0x6c, 0x10, 0x1d, 0xa3, 0x2b, 0x53, 0x27, 0x4d, 0xac, 0x9d, 0x4f, 0x2f, 0x4c,
	0x63, 0xbc, 0xc0, 0xcd, 0x3a, 0x49, 0x90, 0x39, 0x6e, 0xef, 0xbf, 0x91, 0x58, 0xd5, 0x10, 0x47,
	0xb6, 0xd1, 0xff, 0x75, 0xc4, 0xd9, 0x2d, 0x84, 0x3c, 0xbd, 0x7d, 0xbe, 0xa8, 0x6d, 0xa7, 0xe9,
	0xd5, 0x15, 0x9d, 0xa0, 0xd1, 0xe4, 0xff, 0xeb, 0xc6, 0x46, 0xeb, 0x8d, 0x8d, 0x3e, 0x36, 0x36,
	0x7a, 0xde, 0xda, 0xca, 0x7a, 0x6b, 0x2b, 0xef, 0x5b, 0x5b, 0xb9, 0xfb, 0xbd, 0x57, 0x9a, 0x8c,
	0x41, 0xc6, 0x34, 0xf3, 0xc2, 0x80, 0xff, 0xa9, 0xba, 0x58, 0x18, 0x15, 0xfe, 0x7d, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x50, 0xcc, 0x1c, 0xe0, 0xee, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlayersClient is the client API for Players service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlayersClient interface {
	CreatePlayer(ctx context.Context, in *CreatePlayerRequest, opts ...grpc.CallOption) (*CreatePlayerResponse, error)
}

type playersClient struct {
	cc *grpc.ClientConn
}

func NewPlayersClient(cc *grpc.ClientConn) PlayersClient {
	return &playersClient{cc}
}

func (c *playersClient) CreatePlayer(ctx context.Context, in *CreatePlayerRequest, opts ...grpc.CallOption) (*CreatePlayerResponse, error) {
	out := new(CreatePlayerResponse)
	err := c.cc.Invoke(ctx, "/fdr.Players/CreatePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayersServer is the server API for Players service.
type PlayersServer interface {
	CreatePlayer(context.Context, *CreatePlayerRequest) (*CreatePlayerResponse, error)
}

// UnimplementedPlayersServer can be embedded to have forward compatible implementations.
type UnimplementedPlayersServer struct {
}

func (*UnimplementedPlayersServer) CreatePlayer(ctx context.Context, req *CreatePlayerRequest) (*CreatePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayer not implemented")
}

func RegisterPlayersServer(s *grpc.Server, srv PlayersServer) {
	s.RegisterService(&_Players_serviceDesc, srv)
}

func _Players_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayersServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fdr.Players/CreatePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayersServer).CreatePlayer(ctx, req.(*CreatePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Players_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fdr.Players",
	HandlerType: (*PlayersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlayer",
			Handler:    _Players_CreatePlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player.proto",
}

func (m *CreatePlayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePlayerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreatePlayerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePlayerResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Player) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.Positions) > 0 {
		dAtA2 := make([]byte, len(m.Positions)*10)
		var j1 int
		for _, num := range m.Positions {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintPlayer(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func encodeVarintPlayer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreatePlayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreatePlayerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Player) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlayer(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	if len(m.Positions) > 0 {
		l = 0
		for _, e := range m.Positions {
			l += sovPlayer(uint64(e))
		}
		n += 1 + sovPlayer(uint64(l)) + l
	}
	return n
}

func sovPlayer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayer(x uint64) (n int) {
	return sovPlayer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreatePlayerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePlayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePlayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePlayerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePlayerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePlayerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v PlayerPosition
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PlayerPosition(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Positions = append(m.Positions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlayer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlayer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Positions) == 0 {
					m.Positions = make([]PlayerPosition, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PlayerPosition
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PlayerPosition(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Positions = append(m.Positions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPlayer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPlayer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPlayer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPlayer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPlayer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayer   = fmt.Errorf("proto: integer overflow")
)
