syntax = "proto3";

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".
package fdr;

import "google/protobuf/struct.proto";
option go_package = "github.com/thethan/fdr_proto";

message CreateUserRequest {
    User user = 1;
}

message CreateUserResponse {
    string status = 1;
}

message LoginRequest {
    User user = 1;
    string open_id = 2 [json_name = "open_id"];
    string service = 3 [json_name = "service"];
}

message LoginResponse {
    token token = 1 [json_name = "token"];
}

message CredentialRequest {
    string session = 1;
}

message CredentialResponse {
    token token = 1;
}

message ListUserRequest {
    User user = 1;
    string open_id = 2 [json_name = "open_id"];
    string service = 3 [json_name = "service"];
}

message ListUserResponse {
    repeated User user = 1;
    metadata metadata = 2;

}

message token {
    string access_token = 1 [json_name = "access_token"];
    string refresh_token = 2 [json_name = "refresh_token"];
    int32 expires_in = 3 [json_name = "expires_in"];
    string cookie = 4 [json_name = "cookie"];
}

message User {
    int32 id = 1 [json_name = "id"];
    string name = 2 [json_name = "name"];
    string image = 3 [json_name = "image"];
    string email = 4 [json_name = "email"];
}

message metadata {
    int32 total = 1;
    int32 page = 2;
    int32 per_page = 3;
    google.protobuf.Struct filters = 4;
}

service Users {
    rpc Create (CreateUserRequest) returns (CreateUserResponse) {
    }
    rpc Search (ListUserRequest) returns (ListUserResponse) {
    }
    rpc Login (LoginRequest) returns (LoginResponse) {
    }
    rpc Credentials (CredentialRequest) returns (CredentialResponse) {
    }
}
